I" #<div id="toc">
Contents
</div>
<ul id="markdown-toc">
  <li><a href="#recent-updates" id="markdown-toc-recent-updates">Recent Updates</a></li>
  <li><a href="#rounds" id="markdown-toc-rounds">Rounds</a>    <ul>
      <li><a href="#codeforces-round-738-div-2" id="markdown-toc-codeforces-round-738-div-2">Codeforces Round 738 (Div. 2)</a></li>
      <li><a href="#codeforces-round-730-div-2-virtual" id="markdown-toc-codeforces-round-730-div-2-virtual">Codeforces Round 730 (Div. 2), Virtual</a></li>
    </ul>
  </li>
  <li><a href="#problems" id="markdown-toc-problems">Problems</a>    <ul>
      <li><a href="#2016-서울대학교-프로그래밍-경시대회-d번-boj-13202-피자-배치" id="markdown-toc-2016-서울대학교-프로그래밍-경시대회-d번-boj-13202-피자-배치">2016 서울대학교 프로그래밍 경시대회 D번, BOJ 13202 피자 배치</a></li>
      <li><a href="#2012-icpc-daejeon-regional-j-boj-9015-정사각형" id="markdown-toc-2012-icpc-daejeon-regional-j-boj-9015-정사각형">2012 ICPC Daejeon Regional J, BOJ 9015 정사각형</a></li>
      <li><a href="#2019-숭고한-algorithm-camp-contest-p-boj-17403-가장-높고-넓은-성" id="markdown-toc-2019-숭고한-algorithm-camp-contest-p-boj-17403-가장-높고-넓은-성">2019 숭고한 Algorithm Camp Contest P, BOJ 17403 가장 높고 넓은 성</a></li>
      <li><a href="#2009-baltic-olympiad-of-informatics-boj-2415-직사각형" id="markdown-toc-2009-baltic-olympiad-of-informatics-boj-2415-직사각형">2009 Baltic Olympiad of Informatics, BOJ 2415 직사각형</a></li>
    </ul>
  </li>
</ul>
<hr />

<p>August 09 - August 15, 2021</p>

<p>이 글에 구현코드 링크가 없더라도 <a href="https://github.com/gratus907/Gratus_PS">PS 레포 링크</a> 에 가서 대회 단위로 들어가면 보통 올려놓은 코드를 볼 수 있습니다.</p>

<p>읽는 사람이 문제를 읽고 조금 생각해봤다고 가정하고, 대략적인 아이디어만 간단히 적을 생각입니다 ㅎㅎ</p>

<h2 id="recent-updates">Recent Updates</h2>
<ul>
  <li>SCPC Round 2에서 탈락했습니다.</li>
  <li>Codeforces 3번만에 오렌지 복귀에 성공했습니다.</li>
</ul>

<h2 id="rounds">Rounds</h2>

<h3 id="codeforces-round-738-div-2">Codeforces Round 738 (Div. 2)</h3>
<ul>
  <li>Div.2 136등, Rating 2055-&gt;2117</li>
  <li>Performance 2271</li>
  <li>E번에서 mod 10억 7인줄 알고 (998,244,353입니다) 문제를 제대로 안읽어서 25분의 디버깅 시간과 1틀을 헌납했습니다. 그게 아니었다면 아마 100등 정도 했을텐데 아쉽네요.</li>
  <li>그외에는 라운드 자체는 굉장히 재밌었습니다. 라운드 전체에 대한 풀이글은 D2를 업솔빙한 후에 작성할 예정입니다.</li>
</ul>

<h3 id="codeforces-round-730-div-2-virtual">Codeforces Round 730 (Div. 2), Virtual</h3>
<ul>
  <li>Virtual Round</li>
  <li>그럭저럭 재밌었습니다. C번은 실수오차 이슈가 있었다는데 저는 경험하지 않았습니다.</li>
  <li>Interactive 문제는 여전히 코딩 이후 확인이 너무 끔찍합니다.</li>
</ul>

<h2 id="problems">Problems</h2>

<p>기하 연습셋을 만들어서 돌았습니다.</p>

<hr />

<h3 id="2016-서울대학교-프로그래밍-경시대회-d번-boj-13202-피자-배치">2016 서울대학교 프로그래밍 경시대회 D번, BOJ 13202 피자 배치</h3>
<ul>
  <li>난이도 Gold II</li>
  <li>기하를 열심히 하면 풀 수 있습니다.</li>
  <li>가운데 원은 넓이와 둘레의 관계를 통해 구할 수 있고, 나머지는 침착하게 삼각비를 이용하여 모든 값을 계산하면 됩니다.</li>
  <li>매번, 세 방향으로 원을 그릴 수 있습니다. 세 방향 중 가장 큰 원 쪽에 원을 그리고, 그쪽 방향의 원 크기를 줄이는 식으로 구현하면 됩니다.</li>
  <li>종이에 삼각비를 열심히 계산하면 문제 자체는 어렵지 않습니다.</li>
</ul>

<hr />

<h3 id="2012-icpc-daejeon-regional-j-boj-9015-정사각형">2012 ICPC Daejeon Regional J, BOJ 9015 정사각형</h3>
<ul>
  <li>난이도 Platinum V</li>
  <li>$n$개의 점에서, 가장 큰 정사각형의 넓이를 구하는 문제.</li>
  <li>가장 쉬운 방법은 점 $p$ 를 고정하고, 다른 점 $x, y$ 로 변을 그어서 (직각인 경우), $p, x, y$ 와 함께 정사각형을 이루는 $q$가 존재하는지 확인해볼 수 있겠습니다. 이는 각 $p$에 대해 $n^2$ 번의 확인이 필요하므로 $O(n^3)$ 알고리즘입니다.</li>
  <li>이 방법으로는 해결이 불가능합니다. 좀더 복잡도를 줄이기 위해, 대각선을 고정하겠습니다.</li>
  <li>대각선을 하나 고정하면, 다른 대각선을 그어서 나머지 두 점의 위치를 특정할 수 있습니다. 나머지 두 점이 $n$개의 점중에 있는지 확인하면 되고, 이는 set같은걸 쓰면 $O(n^2 \log n)$ 에 할 수 있습니다.</li>
  <li>제한 시간이 무려 10초임에도 불구하고 시간이 상당히 빡빡합니다. 저는 set에 point를 넣는 것이 느린건가 싶어서 점의 $x, y$ 좌표를 잘 때려넣어서 long long int 하나로 바꿨더니 간당간당하게 통과했습니다.</li>
  <li>팁으로, 대각선에 대해 다른 두 점의 위치를 구하는 방법중 하나는 벡터연산을 잘 하면 되는데 그 과정에서 벡터에 1/2배를 해야 합니다. 이런 문제를 해결할 때는 모든 좌표를 2배로 늘려서 구현하면 조금 쉬워집니다.</li>
</ul>

<hr />

<h3 id="2019-숭고한-algorithm-camp-contest-p-boj-17403-가장-높고-넓은-성">2019 숭고한 Algorithm Camp Contest P, BOJ 17403 가장 높고 넓은 성</h3>
<ul>
  <li>난이도 Platinum IV</li>
  <li>Convex Hull 을 구할 수 있는 만큼 계속 구하면 됩니다.</li>
  <li>좋은 기하 라이브러리를 가지고 있다면 쉽습니다.</li>
</ul>

<hr />

<h3 id="2009-baltic-olympiad-of-informatics-boj-2415-직사각형">2009 Baltic Olympiad of Informatics, BOJ 2415 직사각형</h3>
<ul>
  <li>난이도 Platinum I</li>
  <li>바로 위 위 문제인 9015와 거의 비슷한데, 직사각형 버전입니다.</li>
  <li>다양한 방법으로 복잡도를 줄일 수 있습니다. 저는 모든 $n^2$ 개의 쌍에 대해 두 점 사이에서 오른쪽 방향으로 가는 벡터를 저장하되 ($x$좌표가 같으면 위 방향)</li>
  <li>map을 이용하여 &lt;오른쪽으로 가는 벡터 : {시작점들의 리스트}&gt; 를 저장했습니다. 이제, 어떤 오른쪽 방향의 벡터 $p$에 대해, 두 시작점 $x, y$ 가 있다면, $x$ 와 $x+p$, $y$, $y+p$ 가 모두 $n$개의 점들 중에 있었다는 말이므로, 벡터 $r = y - x$ 를 계산하여 $r$과 $p$가 수직한지 관찰하면 됩니다.</li>
  <li>복잡도는 $n^2 \log n$ 인데, 여전히 key와 value가 point와 point list 인 맵이 너무 느립니다. 9015번처럼, 점을 잘 숫자로 인코딩하면 간당간당하게 통과 가능했습니다. 범위를 잘 보고 이렇게 하면 됩니다.
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">B</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="mf">1e9</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">M</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="mf">1e8</span><span class="p">;</span>
<span class="kr">inline</span> <span class="kt">int</span> <span class="nf">ptoi</span> <span class="p">(</span><span class="n">P</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">M</span><span class="p">)</span><span class="o">*</span><span class="n">B</span><span class="o">+</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">M</span><span class="p">);</span>
<span class="p">}</span>
<span class="kr">inline</span> <span class="n">P</span> <span class="nf">itop</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">P</span><span class="p">((</span><span class="n">x</span><span class="o">/</span><span class="n">B</span> <span class="o">-</span> <span class="n">M</span><span class="p">),((</span><span class="n">x</span><span class="o">%</span><span class="n">B</span><span class="p">)</span><span class="o">-</span><span class="n">M</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />
:ET