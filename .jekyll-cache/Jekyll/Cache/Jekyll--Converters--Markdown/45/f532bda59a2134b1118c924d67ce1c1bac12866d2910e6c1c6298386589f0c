I"<div id="toc">
Contents
</div>
<ul id="markdown-toc">
  <li><a href="#motivation" id="markdown-toc-motivation">Motivation</a></li>
  <li><a href="#algorithm--bad-character-heuristic" id="markdown-toc-algorithm--bad-character-heuristic">Algorithm : Bad Character Heuristic</a></li>
</ul>
<hr />

<p>(아직 작성 중인 글입니다)</p>

<p>이 글은 KMP 알고리즘과 Trie 자료구조에 대한 이해를 선행으로 요구합니다.</p>

<h2 id="motivation">Motivation</h2>
<p>Boyer-Moore 알고리즘이 해결하는 문제는 KMP와 똑같이, 어떤 $n$글자의 긴 텍스트 $T$에 대해, 짧은 $m$글자의 패턴 $P$를 매칭하는 것입니다.</p>
<ul>
  <li>가장 Naive하게 $T$의 모든 위치에 대해 $m$글자를 매칭해보는 알고리즘은 $O(nm)$ 입니다.</li>
  <li><a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">KMP 알고리즘</a> 은 (언젠가 작성할 계획은 있지만 우선순위는 낮습니다) 이를 $O(n + m)$ 으로 줄인 엄청난 성과를 보입니다.</li>
</ul>

<p>Boyer-Moore 알고리즘은 worst case에서는 $O(nm)$이지만, average case에 string이 대충 랜덤하게 주어진다면 $O(n / m)$ 복잡도를 보입니다.</p>

<p>기본적으로, 이 알고리즘은 패턴을 <strong>오른쪽부터 왼쪽으로</strong> 매칭하고, 문자열 자체는 (즉 매칭하는 위치 자체는) <strong>왼쪽에서 오른쪽으로</strong> 봅니다. 이 방향의 차이에 주목할 필요가 있습니다. KMP의 경우는 패턴과 텍스트 모두 좌 -&gt; 우 로 매칭합니다. 가능한한 ‘첫’, ‘두번째’ 와 같은 말은 오른쪽에서 왼쪽으로 매칭하는 실제 세팅에, ‘1번’, ‘2번’ 등의 말은 진짜 인덱스를 의미하도록 작성했습니다.</p>

<h2 id="algorithm--bad-character-heuristic">Algorithm : Bad Character Heuristic</h2>
<p>텍스트 <code class="language-plaintext highlighter-rouge">abcacbcadc</code> 에서 패턴 <code class="language-plaintext highlighter-rouge">acbcda</code>를 매칭한다고 생각해 봅시다. 이때, 뒤에서부터 앞으로 매칭을 시도하는 것은 텍스트 <code class="language-plaintext highlighter-rouge">abcacb</code> 와 <code class="language-plaintext highlighter-rouge">acbcda</code>를 매칭하는 것입니다. 여기서 첫 글자 (패턴을 <strong>오른쪽부터</strong> 읽으므로 텍스트와 패턴의 첫 글자는 각각 6번 위치인 b와 a입니다!) 를 매칭하려고 시도했을 때, a를 찾아야 하는데 b를 찾았으므로 실패했습니다.</p>

<p>Naive matching은 여기서 포기하고 다음 위치인 <code class="language-plaintext highlighter-rouge">bcacbc</code>와의 매칭을 시도하겠지만, Boyer-Moore의 알고리즘은 여기서 “그럼 만약, 이 6번위치의 b를 꼭 써야 한다면, 어디까지 내가 패턴을 밀어야 b를 쓸 수 있느냐?” 라는 질문을 던집니다. 생각해보면 텍스트를 기준으로 패턴을 한칸 밀어봤자, 패턴의 5번 글자인 d와 b를 매칭하게 될 것이고 이는 어차피 실패할 것이기 때문입니다. 패턴의 맨 뒤를 기준으로 3글자를 밀어야 b를 텍스트 6번 b에 맞출 수 있으므로, 이만큼을 push해 버릴 수 있습니다. 여기서 이 ‘b’ 를 <strong>Bad Character</strong> 라고 부를 것입니다.</p>

<p>이를 좀더 정리하면…</p>
<ul>
  <li>Bad character가 패턴에 아예 등장하지 않으면, 패턴을 확 밀어서 아예 넘어가도 됩니다.</li>
  <li>Bad character가 패턴에서 <strong>가장 오른쪽에</strong> 등장하는 위치가 현재 보고있는 bad character의 패턴에서의 위치보다 왼쪽이면, 그만큼을 밀어도 됩니다.</li>
  <li>Bad character가 패턴에서 <strong>가장 오른쪽에</strong> 등장하는 위치가 현재 보고있는 bad character의 패턴에서의 위치보다 오른쪽이면, 그만큼을 밀어도 됩니다. 
만약 Bad character로 항상 현재 보고 있는 매치의 맨 뒷 글자 (위에서 b를 쓴 것처럼) 한다면</li>
</ul>
:ET